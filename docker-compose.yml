version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: esports_app
    volumes:
      - .:/var/www/html
      - ./docker/php.ini:/usr/local/etc/php/php.ini
      - ./logs:/var/www/html/logs
    ports:
      - "8080:80"
    environment:
      - APP_ENV=development
      - DB_HOST=mysql
      - DB_NAME=esports_platform
      - DB_USER=esports_user
      - DB_PASS=esports_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - esports_network

  mysql:
    image: mysql:8.0
    container_name: esports_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: esports_platform
      MYSQL_USER: esports_user
      MYSQL_PASSWORD: esports_pass
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database_schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
      - ./docker/mysql.cnf:/etc/mysql/conf.d/custom.cnf
    ports:
      - "3306:3306"
    networks:
      - esports_network

  redis:
    image: redis:7-alpine
    container_name: esports_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - esports_network

  websocket:
    image: node:18-alpine
    container_name: esports_websocket
    working_dir: /app
    volumes:
      - ./websocket:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=mysql
      - DB_NAME=esports_platform
      - DB_USER=esports_user
      - DB_PASS=esports_pass
    command: npm run dev
    depends_on:
      - redis
      - mysql
    networks:
      - esports_network

  nginx:
    image: nginx:alpine
    container_name: esports_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./dist:/var/www/html/dist:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - esports_network

  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: esports_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - esports_network

  kibana:
    image: kibana:8.11.0
    container_name: esports_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - esports_network

  prometheus:
    image: prom/prometheus:latest
    container_name: esports_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - esports_network

  grafana:
    image: grafana/grafana:latest
    container_name: esports_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - esports_network

  minio:
    image: minio/minio:latest
    container_name: esports_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: esports_access
      MINIO_SECRET_KEY: esports_secret
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - esports_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

networks:
  esports_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
